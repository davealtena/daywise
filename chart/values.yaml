# Default values for daywise
replicaCount: 1

image:
  repository: daywise/backend
  pullPolicy: IfNotPresent
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}

podSecurityContext:
  fsGroup: 1000

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

service:
  type: ClusterIP
  port: 3000
  targetPort: 3000

ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: daywise.local
      paths:
        - path: /
          pathType: Prefix
  tls: []

resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 250m
    memory: 256Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# Environment variables
env:
  NODE_ENV: production
  PORT: "3000"
  HOST: "0.0.0.0"
  
# Database configuration
postgresql:
  enabled: true
  auth:
    postgresPassword: "changeMe123!"
    username: "daywise"
    password: "daywise123!"
    database: "daywise"
  primary:
    persistence:
      enabled: true
      size: 8Gi
    resources:
      requests:
        memory: 256Mi
        cpu: 250m
      limits:
        memory: 512Mi
        cpu: 500m

# Redis configuration (for caching/sessions)
redis:
  enabled: true
  auth:
    enabled: true
    password: "redis123!"
  master:
    persistence:
      enabled: true
      size: 4Gi
    resources:
      requests:
        memory: 128Mi
        cpu: 100m
      limits:
        memory: 256Mi
        cpu: 200m

# AI Services configuration
ai:
  claude:
    enabled: true
    apiKeySecret: "claude-api-key"
  ollama:
    enabled: true
    url: "http://ollama:11434"

# Monitoring
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
  grafana:
    enabled: true
  prometheus:
    enabled: true

# Backup configuration
backup:
  enabled: true
  schedule: "0 2 * * *" # Daily at 2 AM
  retention: "7d"

# Network policies
networkPolicy:
  enabled: true
  ingress:
    enabled: true
  egress:
    enabled: true

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Health checks
healthCheck:
  enabled: true
  path: "/health"
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

# Secrets (use external secret management in production)
secrets:
  jwt:
    secret: "super-secret-jwt-key-change-in-production"
  database:
    url: "" # Will be auto-generated from postgresql config
  claude:
    apiKey: "" # Set this via external secret management
  redis:
    url: "" # Will be auto-generated from redis config